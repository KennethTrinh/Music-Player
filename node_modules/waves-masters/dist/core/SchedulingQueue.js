'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PriorityQueue = require('./PriorityQueue');

var _PriorityQueue2 = _interopRequireDefault(_PriorityQueue);

var _TimeEngine2 = require('./TimeEngine');

var _TimeEngine3 = _interopRequireDefault(_TimeEngine2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class SchedulingQueue
 * @extends TimeEngine
 */
/**
 * SchedulingQueue base class
 * http://wavesjs.github.io/audio/#audio-scheduling-queue
 *
 * Norbert.Schnell@ircam.fr
 * Copyright 2014, 2015 IRCAM – Centre Pompidou
 */

var SchedulingQueue = function (_TimeEngine) {
  (0, _inherits3.default)(SchedulingQueue, _TimeEngine);

  function SchedulingQueue() {
    (0, _classCallCheck3.default)(this, SchedulingQueue);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SchedulingQueue.__proto__ || (0, _getPrototypeOf2.default)(SchedulingQueue)).call(this));

    _this.__queue = new _PriorityQueue2.default();
    _this.__engines = new _set2.default();
    return _this;
  }

  // TimeEngine 'scheduled' interface


  (0, _createClass3.default)(SchedulingQueue, [{
    key: 'advanceTime',
    value: function advanceTime(time) {
      var engine = this.__queue.head;
      var nextEngineTime = engine.advanceTime(time);

      if (!nextEngineTime) {
        engine.master = null;
        this.__engines.delete(engine);
        this.__queue.remove(engine);
      } else {
        this.__queue.move(engine, nextEngineTime);
      }

      return this.__queue.time;
    }

    // TimeEngine master method to be implemented by derived class

  }, {
    key: 'defer',


    // call a function at a given time
    value: function defer(fun) {
      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;

      if (!(fun instanceof Function)) throw new Error("object cannot be defered by scheduler");

      this.add({
        advanceTime: function advanceTime(time) {
          fun(time);
        } // make sure that the advanceTime method does not returm anything
      }, time);
    }

    // add a time engine to the scheduler

  }, {
    key: 'add',
    value: function add(engine) {
      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;

      if (!_TimeEngine3.default.implementsScheduled(engine)) throw new Error("object cannot be added to scheduler");

      if (engine.master) throw new Error("object has already been added to a master");

      engine.master = this;

      // add to engines and queue
      this.__engines.add(engine);
      var nextTime = this.__queue.insert(engine, time);

      // reschedule queue
      this.resetTime(nextTime);
    }

    // remove a time engine from the queue

  }, {
    key: 'remove',
    value: function remove(engine) {
      if (engine.master !== this) throw new Error("object has not been added to this scheduler");

      engine.master = null;

      // remove from array and queue
      this.__engines.delete(engine);
      var nextTime = this.__queue.remove(engine);

      // reschedule queue
      this.resetTime(nextTime);
    }

    // reset next engine time

  }, {
    key: 'resetEngineTime',
    value: function resetEngineTime(engine) {
      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currentTime;

      if (engine.master !== this) throw new Error("object has not been added to this scheduler");

      var nextTime = void 0;

      if (this.__queue.has(engine)) nextTime = this.__queue.move(engine, time);else nextTime = this.__queue.insert(engine, time);

      this.resetTime(nextTime);
    }

    // check whether a given engine is scheduled

  }, {
    key: 'has',
    value: function has(engine) {
      return this.__engines.has(engine);
    }

    // clear queue

  }, {
    key: 'clear',
    value: function clear() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(this.__engines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var engine = _step.value;

          engine.master = null;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.__queue.clear();
      this.__engines.clear();
      this.resetTime(Infinity);
    }
  }, {
    key: 'currentTime',
    get: function get() {
      return 0;
    }
  }]);
  return SchedulingQueue;
}(_TimeEngine3.default);

exports.default = SchedulingQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjaGVkdWxpbmdRdWV1ZS5qcyJdLCJuYW1lcyI6WyJTY2hlZHVsaW5nUXVldWUiLCJfX3F1ZXVlIiwiUHJpb3JpdHlRdWV1ZSIsIl9fZW5naW5lcyIsInRpbWUiLCJlbmdpbmUiLCJoZWFkIiwibmV4dEVuZ2luZVRpbWUiLCJhZHZhbmNlVGltZSIsIm1hc3RlciIsImRlbGV0ZSIsInJlbW92ZSIsIm1vdmUiLCJmdW4iLCJjdXJyZW50VGltZSIsIkZ1bmN0aW9uIiwiRXJyb3IiLCJhZGQiLCJUaW1lRW5naW5lIiwiaW1wbGVtZW50c1NjaGVkdWxlZCIsIm5leHRUaW1lIiwiaW5zZXJ0IiwicmVzZXRUaW1lIiwiaGFzIiwiY2xlYXIiLCJJbmZpbml0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVFBOzs7O0FBQ0E7Ozs7OztBQUVBOzs7O0FBWEE7Ozs7Ozs7O0lBZU1BLGU7OztBQUNKLDZCQUFjO0FBQUE7O0FBQUE7O0FBR1osVUFBS0MsT0FBTCxHQUFlLElBQUlDLHVCQUFKLEVBQWY7QUFDQSxVQUFLQyxTQUFMLEdBQWlCLG1CQUFqQjtBQUpZO0FBS2I7O0FBRUQ7Ozs7O2dDQUNZQyxJLEVBQU07QUFDaEIsVUFBTUMsU0FBUyxLQUFLSixPQUFMLENBQWFLLElBQTVCO0FBQ0EsVUFBTUMsaUJBQWlCRixPQUFPRyxXQUFQLENBQW1CSixJQUFuQixDQUF2Qjs7QUFFQSxVQUFJLENBQUNHLGNBQUwsRUFBcUI7QUFDbkJGLGVBQU9JLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQSxhQUFLTixTQUFMLENBQWVPLE1BQWYsQ0FBc0JMLE1BQXRCO0FBQ0EsYUFBS0osT0FBTCxDQUFhVSxNQUFiLENBQW9CTixNQUFwQjtBQUNELE9BSkQsTUFJTztBQUNMLGFBQUtKLE9BQUwsQ0FBYVcsSUFBYixDQUFrQlAsTUFBbEIsRUFBMEJFLGNBQTFCO0FBQ0Q7O0FBRUQsYUFBTyxLQUFLTixPQUFMLENBQWFHLElBQXBCO0FBQ0Q7O0FBRUQ7Ozs7OztBQUtBOzBCQUNNUyxHLEVBQThCO0FBQUEsVUFBekJULElBQXlCLHVFQUFsQixLQUFLVSxXQUFhOztBQUNsQyxVQUFJLEVBQUVELGVBQWVFLFFBQWpCLENBQUosRUFDRSxNQUFNLElBQUlDLEtBQUosQ0FBVSx1Q0FBVixDQUFOOztBQUVGLFdBQUtDLEdBQUwsQ0FBUztBQUNQVCxxQkFBYSxxQkFBU0osSUFBVCxFQUFlO0FBQUVTLGNBQUlULElBQUo7QUFBWSxTQURuQyxDQUNxQztBQURyQyxPQUFULEVBRUdBLElBRkg7QUFHRDs7QUFFRDs7Ozt3QkFDSUMsTSxFQUFpQztBQUFBLFVBQXpCRCxJQUF5Qix1RUFBbEIsS0FBS1UsV0FBYTs7QUFDbkMsVUFBSSxDQUFDSSxxQkFBV0MsbUJBQVgsQ0FBK0JkLE1BQS9CLENBQUwsRUFDRSxNQUFNLElBQUlXLEtBQUosQ0FBVSxxQ0FBVixDQUFOOztBQUVGLFVBQUlYLE9BQU9JLE1BQVgsRUFDRSxNQUFNLElBQUlPLEtBQUosQ0FBVSwyQ0FBVixDQUFOOztBQUVGWCxhQUFPSSxNQUFQLEdBQWdCLElBQWhCOztBQUVBO0FBQ0EsV0FBS04sU0FBTCxDQUFlYyxHQUFmLENBQW1CWixNQUFuQjtBQUNBLFVBQU1lLFdBQVcsS0FBS25CLE9BQUwsQ0FBYW9CLE1BQWIsQ0FBb0JoQixNQUFwQixFQUE0QkQsSUFBNUIsQ0FBakI7O0FBRUE7QUFDQSxXQUFLa0IsU0FBTCxDQUFlRixRQUFmO0FBQ0Q7O0FBRUQ7Ozs7MkJBQ09mLE0sRUFBUTtBQUNiLFVBQUlBLE9BQU9JLE1BQVAsS0FBa0IsSUFBdEIsRUFDRSxNQUFNLElBQUlPLEtBQUosQ0FBVSw2Q0FBVixDQUFOOztBQUVGWCxhQUFPSSxNQUFQLEdBQWdCLElBQWhCOztBQUVBO0FBQ0EsV0FBS04sU0FBTCxDQUFlTyxNQUFmLENBQXNCTCxNQUF0QjtBQUNBLFVBQU1lLFdBQVcsS0FBS25CLE9BQUwsQ0FBYVUsTUFBYixDQUFvQk4sTUFBcEIsQ0FBakI7O0FBRUE7QUFDQSxXQUFLaUIsU0FBTCxDQUFlRixRQUFmO0FBQ0Q7O0FBRUQ7Ozs7b0NBQ2dCZixNLEVBQWlDO0FBQUEsVUFBekJELElBQXlCLHVFQUFsQixLQUFLVSxXQUFhOztBQUMvQyxVQUFJVCxPQUFPSSxNQUFQLEtBQWtCLElBQXRCLEVBQ0UsTUFBTSxJQUFJTyxLQUFKLENBQVUsNkNBQVYsQ0FBTjs7QUFFRixVQUFJSSxpQkFBSjs7QUFFQSxVQUFJLEtBQUtuQixPQUFMLENBQWFzQixHQUFiLENBQWlCbEIsTUFBakIsQ0FBSixFQUNFZSxXQUFXLEtBQUtuQixPQUFMLENBQWFXLElBQWIsQ0FBa0JQLE1BQWxCLEVBQTBCRCxJQUExQixDQUFYLENBREYsS0FHRWdCLFdBQVcsS0FBS25CLE9BQUwsQ0FBYW9CLE1BQWIsQ0FBb0JoQixNQUFwQixFQUE0QkQsSUFBNUIsQ0FBWDs7QUFFRixXQUFLa0IsU0FBTCxDQUFlRixRQUFmO0FBQ0Q7O0FBRUQ7Ozs7d0JBQ0lmLE0sRUFBUTtBQUNWLGFBQU8sS0FBS0YsU0FBTCxDQUFlb0IsR0FBZixDQUFtQmxCLE1BQW5CLENBQVA7QUFDRDs7QUFFRDs7Ozs0QkFDUTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNOLHdEQUFrQixLQUFLRixTQUF2QjtBQUFBLGNBQVFFLE1BQVI7O0FBQ0VBLGlCQUFPSSxNQUFQLEdBQWdCLElBQWhCO0FBREY7QUFETTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUlOLFdBQUtSLE9BQUwsQ0FBYXVCLEtBQWI7QUFDQSxXQUFLckIsU0FBTCxDQUFlcUIsS0FBZjtBQUNBLFdBQUtGLFNBQUwsQ0FBZUcsUUFBZjtBQUNEOzs7d0JBM0VpQjtBQUNoQixhQUFPLENBQVA7QUFDRDs7O0VBM0IyQlAsb0I7O2tCQXVHZmxCLGUiLCJmaWxlIjoiU2NoZWR1bGluZ1F1ZXVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTY2hlZHVsaW5nUXVldWUgYmFzZSBjbGFzc1xuICogaHR0cDovL3dhdmVzanMuZ2l0aHViLmlvL2F1ZGlvLyNhdWRpby1zY2hlZHVsaW5nLXF1ZXVlXG4gKlxuICogTm9yYmVydC5TY2huZWxsQGlyY2FtLmZyXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAxNSBJUkNBTSDigJPCoENlbnRyZSBQb21waWRvdVxuICovXG5cbmltcG9ydCBQcmlvcml0eVF1ZXVlIGZyb20gJy4vUHJpb3JpdHlRdWV1ZSc7XG5pbXBvcnQgVGltZUVuZ2luZSBmcm9tICcuL1RpbWVFbmdpbmUnO1xuXG4vKipcbiAqIEBjbGFzcyBTY2hlZHVsaW5nUXVldWVcbiAqIEBleHRlbmRzIFRpbWVFbmdpbmVcbiAqL1xuY2xhc3MgU2NoZWR1bGluZ1F1ZXVlIGV4dGVuZHMgVGltZUVuZ2luZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9fcXVldWUgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuICAgIHRoaXMuX19lbmdpbmVzID0gbmV3IFNldCgpO1xuICB9XG5cbiAgLy8gVGltZUVuZ2luZSAnc2NoZWR1bGVkJyBpbnRlcmZhY2VcbiAgYWR2YW5jZVRpbWUodGltZSkge1xuICAgIGNvbnN0IGVuZ2luZSA9IHRoaXMuX19xdWV1ZS5oZWFkO1xuICAgIGNvbnN0IG5leHRFbmdpbmVUaW1lID0gZW5naW5lLmFkdmFuY2VUaW1lKHRpbWUpO1xuXG4gICAgaWYgKCFuZXh0RW5naW5lVGltZSkge1xuICAgICAgZW5naW5lLm1hc3RlciA9IG51bGw7XG4gICAgICB0aGlzLl9fZW5naW5lcy5kZWxldGUoZW5naW5lKTtcbiAgICAgIHRoaXMuX19xdWV1ZS5yZW1vdmUoZW5naW5lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fX3F1ZXVlLm1vdmUoZW5naW5lLCBuZXh0RW5naW5lVGltZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX19xdWV1ZS50aW1lO1xuICB9XG5cbiAgLy8gVGltZUVuZ2luZSBtYXN0ZXIgbWV0aG9kIHRvIGJlIGltcGxlbWVudGVkIGJ5IGRlcml2ZWQgY2xhc3NcbiAgZ2V0IGN1cnJlbnRUaW1lKCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLy8gY2FsbCBhIGZ1bmN0aW9uIGF0IGEgZ2l2ZW4gdGltZVxuICBkZWZlcihmdW4sIHRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lKSB7XG4gICAgaWYgKCEoZnVuIGluc3RhbmNlb2YgRnVuY3Rpb24pKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGNhbm5vdCBiZSBkZWZlcmVkIGJ5IHNjaGVkdWxlclwiKTtcblxuICAgIHRoaXMuYWRkKHtcbiAgICAgIGFkdmFuY2VUaW1lOiBmdW5jdGlvbih0aW1lKSB7IGZ1bih0aW1lKTsgfSwgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIGFkdmFuY2VUaW1lIG1ldGhvZCBkb2VzIG5vdCByZXR1cm0gYW55dGhpbmdcbiAgICB9LCB0aW1lKTtcbiAgfVxuXG4gIC8vIGFkZCBhIHRpbWUgZW5naW5lIHRvIHRoZSBzY2hlZHVsZXJcbiAgYWRkKGVuZ2luZSwgdGltZSA9IHRoaXMuY3VycmVudFRpbWUpIHtcbiAgICBpZiAoIVRpbWVFbmdpbmUuaW1wbGVtZW50c1NjaGVkdWxlZChlbmdpbmUpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGNhbm5vdCBiZSBhZGRlZCB0byBzY2hlZHVsZXJcIik7XG5cbiAgICBpZiAoZW5naW5lLm1hc3RlcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkIHRvIGEgbWFzdGVyXCIpO1xuXG4gICAgZW5naW5lLm1hc3RlciA9IHRoaXM7XG5cbiAgICAvLyBhZGQgdG8gZW5naW5lcyBhbmQgcXVldWVcbiAgICB0aGlzLl9fZW5naW5lcy5hZGQoZW5naW5lKTtcbiAgICBjb25zdCBuZXh0VGltZSA9IHRoaXMuX19xdWV1ZS5pbnNlcnQoZW5naW5lLCB0aW1lKTtcblxuICAgIC8vIHJlc2NoZWR1bGUgcXVldWVcbiAgICB0aGlzLnJlc2V0VGltZShuZXh0VGltZSk7XG4gIH1cblxuICAvLyByZW1vdmUgYSB0aW1lIGVuZ2luZSBmcm9tIHRoZSBxdWV1ZVxuICByZW1vdmUoZW5naW5lKSB7XG4gICAgaWYgKGVuZ2luZS5tYXN0ZXIgIT09IHRoaXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3QgaGFzIG5vdCBiZWVuIGFkZGVkIHRvIHRoaXMgc2NoZWR1bGVyXCIpO1xuXG4gICAgZW5naW5lLm1hc3RlciA9IG51bGw7XG5cbiAgICAvLyByZW1vdmUgZnJvbSBhcnJheSBhbmQgcXVldWVcbiAgICB0aGlzLl9fZW5naW5lcy5kZWxldGUoZW5naW5lKTtcbiAgICBjb25zdCBuZXh0VGltZSA9IHRoaXMuX19xdWV1ZS5yZW1vdmUoZW5naW5lKTtcblxuICAgIC8vIHJlc2NoZWR1bGUgcXVldWVcbiAgICB0aGlzLnJlc2V0VGltZShuZXh0VGltZSk7XG4gIH1cblxuICAvLyByZXNldCBuZXh0IGVuZ2luZSB0aW1lXG4gIHJlc2V0RW5naW5lVGltZShlbmdpbmUsIHRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lKSB7XG4gICAgaWYgKGVuZ2luZS5tYXN0ZXIgIT09IHRoaXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3QgaGFzIG5vdCBiZWVuIGFkZGVkIHRvIHRoaXMgc2NoZWR1bGVyXCIpO1xuXG4gICAgbGV0IG5leHRUaW1lO1xuXG4gICAgaWYgKHRoaXMuX19xdWV1ZS5oYXMoZW5naW5lKSlcbiAgICAgIG5leHRUaW1lID0gdGhpcy5fX3F1ZXVlLm1vdmUoZW5naW5lLCB0aW1lKTtcbiAgICBlbHNlXG4gICAgICBuZXh0VGltZSA9IHRoaXMuX19xdWV1ZS5pbnNlcnQoZW5naW5lLCB0aW1lKTtcblxuICAgIHRoaXMucmVzZXRUaW1lKG5leHRUaW1lKTtcbiAgfVxuXG4gIC8vIGNoZWNrIHdoZXRoZXIgYSBnaXZlbiBlbmdpbmUgaXMgc2NoZWR1bGVkXG4gIGhhcyhlbmdpbmUpIHtcbiAgICByZXR1cm4gdGhpcy5fX2VuZ2luZXMuaGFzKGVuZ2luZSk7XG4gIH1cblxuICAvLyBjbGVhciBxdWV1ZVxuICBjbGVhcigpIHtcbiAgICBmb3IobGV0IGVuZ2luZSBvZiB0aGlzLl9fZW5naW5lcylcbiAgICAgIGVuZ2luZS5tYXN0ZXIgPSBudWxsO1xuXG4gICAgdGhpcy5fX3F1ZXVlLmNsZWFyKCk7XG4gICAgdGhpcy5fX2VuZ2luZXMuY2xlYXIoKTtcbiAgICB0aGlzLnJlc2V0VGltZShJbmZpbml0eSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NoZWR1bGluZ1F1ZXVlXG4iXX0=