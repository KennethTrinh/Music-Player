'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _SchedulingQueue2 = require('../core/SchedulingQueue');

var _SchedulingQueue3 = _interopRequireDefault(_SchedulingQueue2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('wavesjs:masters');

function isFunction(functionToCheck) {
  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
}

/**
 * The `Scheduler` class implements a master for `TimeEngine` instances
 * that implement the *scheduled* interface (such as the `Metronome` and
 * `GranularEngine`).
 *
 * A `Scheduler` can also schedule simple callback functions.
 * The class is based on recursive calls to `setTimeout` and uses the time
 * returned by the `getTimeFunction` passed as first argument as a logical time
 * passed to the `advanceTime` methods of the scheduled engines or to the
 * scheduled callback functions.
 * It extends the `SchedulingQueue` class that itself includes a `PriorityQueue`
 * to assure the order of the scheduled engines (see `SimpleScheduler` for a
 * simplified scheduler implementation without `PriorityQueue`).
 *
 * {@link https://rawgit.com/wavesjs/waves-masters/master/examples/scheduler/index.html}
 *
 * @param {Function} getTimeFunction - Function that must return a time in second.
 * @param {Object} [options={}] - default options.
 * @param {Number} [options.period=0.025] - period of the scheduler.
 * @param {Number} [options.lookahead=0.1] - lookahead of the scheduler.
 * @param {Number} [options.currentTimeToAudioTimeFunction] - function that convert
 *  `currentTime` to `audioTime`. Defaults to no-op.
 *
 * @see TimeEngine
 * @see SimpleScheduler
 *
 * @example
 * import * as masters from 'waves-masters';
 *
 * const getTimeFunction = () => preformance.now() / 1000;
 * const scheduler = new masters.Scheduler(getTimeFunction);
 *
 * scheduler.add(myEngine);
 */

var Scheduler = function (_SchedulingQueue) {
  (0, _inherits3.default)(Scheduler, _SchedulingQueue);

  function Scheduler(getTimeFunction) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Scheduler);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Scheduler.__proto__ || (0, _getPrototypeOf2.default)(Scheduler)).call(this));

    if (!isFunction(getTimeFunction)) throw new Error('Invalid argument `getTimeFunction`');

    _this.getTimeFunction = getTimeFunction;

    _this.__currentTime = null;
    _this.__nextTime = Infinity;
    _this.__timeout = null;

    /**
     * scheduler (setTimeout) period
     * @type {Number}
     * @name period
     * @memberof Scheduler
     * @instance
     */
    _this.period = options.period || 0.025;

    /**
     * scheduler lookahead time (> period)
     * @type {Number}
     * @name lookahead
     * @memberof Scheduler
     * @instance
     */
    _this.lookahead = options.lookahead || 0.1;

    _this._currentTimeToAudioTimeFunction = options.currentTimeToAudioTimeFunction || function (currentTime) {
      return currentTime;
    };
    return _this;
  }

  // setTimeout scheduling loop


  (0, _createClass3.default)(Scheduler, [{
    key: '__tick',
    value: function __tick() {
      var currentTime = this.getTimeFunction();
      var time = this.__nextTime;

      this.__timeout = null;

      while (time <= currentTime + this.lookahead) {
        this.__currentTime = time;
        time = this.advanceTime(time);
      }

      this.__currentTime = null;
      this.resetTime(time);
    }
  }, {
    key: 'resetTime',
    value: function resetTime() {
      var _this2 = this;

      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentTime;

      if (this.master) {
        this.master.reset(this, time);
      } else {
        if (this.__timeout) {
          clearTimeout(this.__timeout);
          this.__timeout = null;
        }

        if (time !== Infinity) {
          if (this.__nextTime === Infinity) log('Scheduler Start');

          var timeOutDelay = Math.max(time - this.lookahead - this.getTimeFunction(), this.period);

          this.__timeout = setTimeout(function () {
            _this2.__tick();
          }, Math.ceil(timeOutDelay * 1000));
        } else if (this.__nextTime !== Infinity) {
          log('Scheduler Stop');
        }

        this.__nextTime = time;
      }
    }

    /**
     * Scheduler current logical time.
     *
     * @name currentTime
     * @type {Number}
     * @memberof Scheduler
     * @instance
     */

  }, {
    key: 'currentTime',
    get: function get() {
      // @note - can this really happen, and if yes, in which case?
      if (this.master) return this.master.currentTime;

      return this.__currentTime || this.getTimeFunction() + this.lookahead;
    }

    /**
     * Scheduler current audio time according to `currentTime`
     *
     * @name audioTime
     * @type {Number}
     * @memberif Scheduler
     * @instance
     */

  }, {
    key: 'audioTime',
    get: function get() {
      // @note - add this as in
      if (this.master) return this.master.audioTime;

      return this._currentTimeToAudioTimeFunction(this.currentTime);
    }
  }, {
    key: 'currentPosition',
    get: function get() {
      var master = this.master;

      if (master && master.currentPosition !== undefined) return master.currentPosition;

      return undefined;
    }

    // inherited from scheduling queue
    /**
     * Add a TimeEngine or a simple callback function to the scheduler at an
     * optionally given time. Whether the add method is called with a TimeEngine
     * or a callback function it returns a TimeEngine that can be used as argument
     * of the methods remove and resetEngineTime. A TimeEngine added to a scheduler
     * has to implement the scheduled interface. The callback function added to a
     * scheduler will be called at the given time and with the given time as
     * argument. The callback can return a new scheduling time (i.e. the next
     * time when it will be called) or it can return Infinity to suspend scheduling
     * without removing the function from the scheduler. A function that does
     * not return a value (or returns null or 0) is removed from the scheduler
     * and cannot be used as argument of the methods remove and resetEngineTime
     * anymore.
     *
     * @name add
     * @function
     * @memberof Scheduler
     * @instance
     * @param {TimeEngine|Function} engine - Engine to add to the scheduler
     * @param {Number} [time=this.currentTime] - Schedule time
     */
    /**
     * Remove a TimeEngine from the scheduler that has been added to the
     * scheduler using the add method.
     *
     * @name add
     * @function
     * @memberof Scheduler
     * @instance
     * @param {TimeEngine} engine - Engine to remove from the scheduler
     * @param {Number} [time=this.currentTime] - Schedule time
     */
    /**
     * Reschedule a scheduled time engine at a given time.
     *
     * @name resetEngineTime
     * @function
     * @memberof Scheduler
     * @instance
     * @param {TimeEngine} engine - Engine to reschedule
     * @param {Number} time - Schedule time
     */
    /**
     * Remove all scheduled callbacks and engines from the scheduler.
     *
     * @name clear
     * @function
     * @memberof Scheduler
     * @instance
     */

  }]);
  return Scheduler;
}(_SchedulingQueue3.default);

exports.default = Scheduler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjaGVkdWxlci5qcyJdLCJuYW1lcyI6WyJsb2ciLCJpc0Z1bmN0aW9uIiwiZnVuY3Rpb25Ub0NoZWNrIiwidG9TdHJpbmciLCJjYWxsIiwiU2NoZWR1bGVyIiwiZ2V0VGltZUZ1bmN0aW9uIiwib3B0aW9ucyIsIkVycm9yIiwiX19jdXJyZW50VGltZSIsIl9fbmV4dFRpbWUiLCJJbmZpbml0eSIsIl9fdGltZW91dCIsInBlcmlvZCIsImxvb2thaGVhZCIsIl9jdXJyZW50VGltZVRvQXVkaW9UaW1lRnVuY3Rpb24iLCJjdXJyZW50VGltZVRvQXVkaW9UaW1lRnVuY3Rpb24iLCJjdXJyZW50VGltZSIsInRpbWUiLCJhZHZhbmNlVGltZSIsInJlc2V0VGltZSIsIm1hc3RlciIsInJlc2V0IiwiY2xlYXJUaW1lb3V0IiwidGltZU91dERlbGF5IiwiTWF0aCIsIm1heCIsInNldFRpbWVvdXQiLCJfX3RpY2siLCJjZWlsIiwiYXVkaW9UaW1lIiwiY3VycmVudFBvc2l0aW9uIiwidW5kZWZpbmVkIiwiU2NoZWR1bGluZ1F1ZXVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLE1BQU0scUJBQU0saUJBQU4sQ0FBWjs7QUFFQSxTQUFTQyxVQUFULENBQW9CQyxlQUFwQixFQUFxQztBQUNuQyxTQUFPQSxtQkFBbUIsR0FBR0MsUUFBSCxDQUFZQyxJQUFaLENBQWlCRixlQUFqQixNQUFzQyxtQkFBaEU7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFrQ01HLFM7OztBQUNKLHFCQUFZQyxlQUFaLEVBQTJDO0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQUE7O0FBQUE7O0FBR3pDLFFBQUksQ0FBQ04sV0FBV0ssZUFBWCxDQUFMLEVBQ0UsTUFBTSxJQUFJRSxLQUFKLENBQVUsb0NBQVYsQ0FBTjs7QUFFRixVQUFLRixlQUFMLEdBQXVCQSxlQUF2Qjs7QUFFQSxVQUFLRyxhQUFMLEdBQXFCLElBQXJCO0FBQ0EsVUFBS0MsVUFBTCxHQUFrQkMsUUFBbEI7QUFDQSxVQUFLQyxTQUFMLEdBQWlCLElBQWpCOztBQUVBOzs7Ozs7O0FBT0EsVUFBS0MsTUFBTCxHQUFjTixRQUFRTSxNQUFSLElBQW1CLEtBQWpDOztBQUVBOzs7Ozs7O0FBT0EsVUFBS0MsU0FBTCxHQUFpQlAsUUFBUU8sU0FBUixJQUFzQixHQUF2Qzs7QUFFQSxVQUFLQywrQkFBTCxHQUNFUixRQUFRUyw4QkFBUixJQUEwQyxVQUFTQyxXQUFULEVBQXNCO0FBQUUsYUFBT0EsV0FBUDtBQUFvQixLQUR4RjtBQTlCeUM7QUFnQzFDOztBQUVEOzs7Ozs2QkFDUztBQUNQLFVBQU1BLGNBQWMsS0FBS1gsZUFBTCxFQUFwQjtBQUNBLFVBQUlZLE9BQU8sS0FBS1IsVUFBaEI7O0FBRUEsV0FBS0UsU0FBTCxHQUFpQixJQUFqQjs7QUFFQSxhQUFPTSxRQUFRRCxjQUFjLEtBQUtILFNBQWxDLEVBQTZDO0FBQzNDLGFBQUtMLGFBQUwsR0FBcUJTLElBQXJCO0FBQ0FBLGVBQU8sS0FBS0MsV0FBTCxDQUFpQkQsSUFBakIsQ0FBUDtBQUNEOztBQUVELFdBQUtULGFBQUwsR0FBcUIsSUFBckI7QUFDQSxXQUFLVyxTQUFMLENBQWVGLElBQWY7QUFDRDs7O2dDQUVrQztBQUFBOztBQUFBLFVBQXpCQSxJQUF5Qix1RUFBbEIsS0FBS0QsV0FBYTs7QUFDakMsVUFBSSxLQUFLSSxNQUFULEVBQWlCO0FBQ2YsYUFBS0EsTUFBTCxDQUFZQyxLQUFaLENBQWtCLElBQWxCLEVBQXdCSixJQUF4QjtBQUNELE9BRkQsTUFFTztBQUNMLFlBQUksS0FBS04sU0FBVCxFQUFvQjtBQUNsQlcsdUJBQWEsS0FBS1gsU0FBbEI7QUFDQSxlQUFLQSxTQUFMLEdBQWlCLElBQWpCO0FBQ0Q7O0FBRUQsWUFBSU0sU0FBU1AsUUFBYixFQUF1QjtBQUNyQixjQUFJLEtBQUtELFVBQUwsS0FBb0JDLFFBQXhCLEVBQ0VYLElBQUksaUJBQUo7O0FBRUYsY0FBTXdCLGVBQWVDLEtBQUtDLEdBQUwsQ0FBVVIsT0FBTyxLQUFLSixTQUFaLEdBQXdCLEtBQUtSLGVBQUwsRUFBbEMsRUFBMkQsS0FBS08sTUFBaEUsQ0FBckI7O0FBRUEsZUFBS0QsU0FBTCxHQUFpQmUsV0FBVyxZQUFNO0FBQ2hDLG1CQUFLQyxNQUFMO0FBQ0QsV0FGZ0IsRUFFZEgsS0FBS0ksSUFBTCxDQUFVTCxlQUFlLElBQXpCLENBRmMsQ0FBakI7QUFHRCxTQVRELE1BU08sSUFBSSxLQUFLZCxVQUFMLEtBQW9CQyxRQUF4QixFQUFrQztBQUN2Q1gsY0FBSSxnQkFBSjtBQUNEOztBQUVELGFBQUtVLFVBQUwsR0FBa0JRLElBQWxCO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7Ozs7Ozs7d0JBUWtCO0FBQ2hCO0FBQ0EsVUFBSSxLQUFLRyxNQUFULEVBQ0UsT0FBTyxLQUFLQSxNQUFMLENBQVlKLFdBQW5COztBQUVGLGFBQU8sS0FBS1IsYUFBTCxJQUFzQixLQUFLSCxlQUFMLEtBQXlCLEtBQUtRLFNBQTNEO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7O3dCQVFnQjtBQUNkO0FBQ0EsVUFBSSxLQUFLTyxNQUFULEVBQ0UsT0FBTyxLQUFLQSxNQUFMLENBQVlTLFNBQW5COztBQUVGLGFBQU8sS0FBS2YsK0JBQUwsQ0FBcUMsS0FBS0UsV0FBMUMsQ0FBUDtBQUNEOzs7d0JBRXFCO0FBQ3BCLFVBQU1JLFNBQVMsS0FBS0EsTUFBcEI7O0FBRUEsVUFBSUEsVUFBVUEsT0FBT1UsZUFBUCxLQUEyQkMsU0FBekMsRUFDRSxPQUFPWCxPQUFPVSxlQUFkOztBQUVGLGFBQU9DLFNBQVA7QUFDRDs7QUFJRDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkE7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7QUFVQTs7Ozs7Ozs7Ozs7RUFuS3NCQyx5Qjs7a0JBNktUNUIsUyIsImZpbGUiOiJTY2hlZHVsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IFNjaGVkdWxpbmdRdWV1ZSBmcm9tICcuLi9jb3JlL1NjaGVkdWxpbmdRdWV1ZSc7XG5cbmNvbnN0IGxvZyA9IGRlYnVnKCd3YXZlc2pzOm1hc3RlcnMnKTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiB7fS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogVGhlIGBTY2hlZHVsZXJgIGNsYXNzIGltcGxlbWVudHMgYSBtYXN0ZXIgZm9yIGBUaW1lRW5naW5lYCBpbnN0YW5jZXNcbiAqIHRoYXQgaW1wbGVtZW50IHRoZSAqc2NoZWR1bGVkKiBpbnRlcmZhY2UgKHN1Y2ggYXMgdGhlIGBNZXRyb25vbWVgIGFuZFxuICogYEdyYW51bGFyRW5naW5lYCkuXG4gKlxuICogQSBgU2NoZWR1bGVyYCBjYW4gYWxzbyBzY2hlZHVsZSBzaW1wbGUgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICogVGhlIGNsYXNzIGlzIGJhc2VkIG9uIHJlY3Vyc2l2ZSBjYWxscyB0byBgc2V0VGltZW91dGAgYW5kIHVzZXMgdGhlIHRpbWVcbiAqIHJldHVybmVkIGJ5IHRoZSBgZ2V0VGltZUZ1bmN0aW9uYCBwYXNzZWQgYXMgZmlyc3QgYXJndW1lbnQgYXMgYSBsb2dpY2FsIHRpbWVcbiAqIHBhc3NlZCB0byB0aGUgYGFkdmFuY2VUaW1lYCBtZXRob2RzIG9mIHRoZSBzY2hlZHVsZWQgZW5naW5lcyBvciB0byB0aGVcbiAqIHNjaGVkdWxlZCBjYWxsYmFjayBmdW5jdGlvbnMuXG4gKiBJdCBleHRlbmRzIHRoZSBgU2NoZWR1bGluZ1F1ZXVlYCBjbGFzcyB0aGF0IGl0c2VsZiBpbmNsdWRlcyBhIGBQcmlvcml0eVF1ZXVlYFxuICogdG8gYXNzdXJlIHRoZSBvcmRlciBvZiB0aGUgc2NoZWR1bGVkIGVuZ2luZXMgKHNlZSBgU2ltcGxlU2NoZWR1bGVyYCBmb3IgYVxuICogc2ltcGxpZmllZCBzY2hlZHVsZXIgaW1wbGVtZW50YXRpb24gd2l0aG91dCBgUHJpb3JpdHlRdWV1ZWApLlxuICpcbiAqIHtAbGluayBodHRwczovL3Jhd2dpdC5jb20vd2F2ZXNqcy93YXZlcy1tYXN0ZXJzL21hc3Rlci9leGFtcGxlcy9zY2hlZHVsZXIvaW5kZXguaHRtbH1cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRUaW1lRnVuY3Rpb24gLSBGdW5jdGlvbiB0aGF0IG11c3QgcmV0dXJuIGEgdGltZSBpbiBzZWNvbmQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gZGVmYXVsdCBvcHRpb25zLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnBlcmlvZD0wLjAyNV0gLSBwZXJpb2Qgb2YgdGhlIHNjaGVkdWxlci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5sb29rYWhlYWQ9MC4xXSAtIGxvb2thaGVhZCBvZiB0aGUgc2NoZWR1bGVyLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmN1cnJlbnRUaW1lVG9BdWRpb1RpbWVGdW5jdGlvbl0gLSBmdW5jdGlvbiB0aGF0IGNvbnZlcnRcbiAqICBgY3VycmVudFRpbWVgIHRvIGBhdWRpb1RpbWVgLiBEZWZhdWx0cyB0byBuby1vcC5cbiAqXG4gKiBAc2VlIFRpbWVFbmdpbmVcbiAqIEBzZWUgU2ltcGxlU2NoZWR1bGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIG1hc3RlcnMgZnJvbSAnd2F2ZXMtbWFzdGVycyc7XG4gKlxuICogY29uc3QgZ2V0VGltZUZ1bmN0aW9uID0gKCkgPT4gcHJlZm9ybWFuY2Uubm93KCkgLyAxMDAwO1xuICogY29uc3Qgc2NoZWR1bGVyID0gbmV3IG1hc3RlcnMuU2NoZWR1bGVyKGdldFRpbWVGdW5jdGlvbik7XG4gKlxuICogc2NoZWR1bGVyLmFkZChteUVuZ2luZSk7XG4gKi9cbmNsYXNzIFNjaGVkdWxlciBleHRlbmRzIFNjaGVkdWxpbmdRdWV1ZSB7XG4gIGNvbnN0cnVjdG9yKGdldFRpbWVGdW5jdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmICghaXNGdW5jdGlvbihnZXRUaW1lRnVuY3Rpb24pKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IGBnZXRUaW1lRnVuY3Rpb25gJyk7XG5cbiAgICB0aGlzLmdldFRpbWVGdW5jdGlvbiA9IGdldFRpbWVGdW5jdGlvbjtcblxuICAgIHRoaXMuX19jdXJyZW50VGltZSA9IG51bGw7XG4gICAgdGhpcy5fX25leHRUaW1lID0gSW5maW5pdHk7XG4gICAgdGhpcy5fX3RpbWVvdXQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogc2NoZWR1bGVyIChzZXRUaW1lb3V0KSBwZXJpb2RcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBuYW1lIHBlcmlvZFxuICAgICAqIEBtZW1iZXJvZiBTY2hlZHVsZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0aGlzLnBlcmlvZCA9IG9wdGlvbnMucGVyaW9kIHx8IMKgMC4wMjU7XG5cbiAgICAvKipcbiAgICAgKiBzY2hlZHVsZXIgbG9va2FoZWFkIHRpbWUgKD4gcGVyaW9kKVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG5hbWUgbG9va2FoZWFkXG4gICAgICogQG1lbWJlcm9mIFNjaGVkdWxlclxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRoaXMubG9va2FoZWFkID0gb3B0aW9ucy5sb29rYWhlYWQgfHwgwqAwLjE7XG5cbiAgICB0aGlzLl9jdXJyZW50VGltZVRvQXVkaW9UaW1lRnVuY3Rpb24gPVxuICAgICAgb3B0aW9ucy5jdXJyZW50VGltZVRvQXVkaW9UaW1lRnVuY3Rpb24gfHzCoGZ1bmN0aW9uKGN1cnJlbnRUaW1lKSB7IHJldHVybiBjdXJyZW50VGltZSB9O1xuICB9XG5cbiAgLy8gc2V0VGltZW91dCBzY2hlZHVsaW5nIGxvb3BcbiAgX190aWNrKCkge1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gdGhpcy5nZXRUaW1lRnVuY3Rpb24oKTtcbiAgICBsZXQgdGltZSA9IHRoaXMuX19uZXh0VGltZTtcblxuICAgIHRoaXMuX190aW1lb3V0ID0gbnVsbDtcblxuICAgIHdoaWxlICh0aW1lIDw9IGN1cnJlbnRUaW1lICsgdGhpcy5sb29rYWhlYWQpIHtcbiAgICAgIHRoaXMuX19jdXJyZW50VGltZSA9IHRpbWU7XG4gICAgICB0aW1lID0gdGhpcy5hZHZhbmNlVGltZSh0aW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLl9fY3VycmVudFRpbWUgPSBudWxsO1xuICAgIHRoaXMucmVzZXRUaW1lKHRpbWUpO1xuICB9XG5cbiAgcmVzZXRUaW1lKHRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lKSB7XG4gICAgaWYgKHRoaXMubWFzdGVyKSB7XG4gICAgICB0aGlzLm1hc3Rlci5yZXNldCh0aGlzLCB0aW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuX190aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9fdGltZW91dCk7XG4gICAgICAgIHRoaXMuX190aW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgIT09IEluZmluaXR5KSB7XG4gICAgICAgIGlmICh0aGlzLl9fbmV4dFRpbWUgPT09IEluZmluaXR5KVxuICAgICAgICAgIGxvZygnU2NoZWR1bGVyIFN0YXJ0Jyk7XG5cbiAgICAgICAgY29uc3QgdGltZU91dERlbGF5ID0gTWF0aC5tYXgoKHRpbWUgLSB0aGlzLmxvb2thaGVhZCAtIHRoaXMuZ2V0VGltZUZ1bmN0aW9uKCkpLCB0aGlzLnBlcmlvZCk7XG5cbiAgICAgICAgdGhpcy5fX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9fdGljaygpO1xuICAgICAgICB9LCBNYXRoLmNlaWwodGltZU91dERlbGF5ICogMTAwMCkpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9fbmV4dFRpbWUgIT09IEluZmluaXR5KSB7XG4gICAgICAgIGxvZygnU2NoZWR1bGVyIFN0b3AnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fX25leHRUaW1lID0gdGltZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2NoZWR1bGVyIGN1cnJlbnQgbG9naWNhbCB0aW1lLlxuICAgKlxuICAgKiBAbmFtZSBjdXJyZW50VGltZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAbWVtYmVyb2YgU2NoZWR1bGVyXG4gICAqIEBpbnN0YW5jZVxuICAgKi9cbiAgZ2V0IGN1cnJlbnRUaW1lKCkge1xuICAgIC8vIEBub3RlIC0gY2FuIHRoaXMgcmVhbGx5IGhhcHBlbiwgYW5kIGlmIHllcywgaW4gd2hpY2ggY2FzZT9cbiAgICBpZiAodGhpcy5tYXN0ZXIpXG4gICAgICByZXR1cm4gdGhpcy5tYXN0ZXIuY3VycmVudFRpbWU7XG5cbiAgICByZXR1cm4gdGhpcy5fX2N1cnJlbnRUaW1lIHx8IHRoaXMuZ2V0VGltZUZ1bmN0aW9uKCkgKyB0aGlzLmxvb2thaGVhZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2hlZHVsZXIgY3VycmVudCBhdWRpbyB0aW1lIGFjY29yZGluZyB0byBgY3VycmVudFRpbWVgXG4gICAqXG4gICAqIEBuYW1lIGF1ZGlvVGltZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAbWVtYmVyaWYgU2NoZWR1bGVyXG4gICAqIEBpbnN0YW5jZVxuICAgKi9cbiAgZ2V0IGF1ZGlvVGltZSgpIHtcbiAgICAvLyBAbm90ZSAtIGFkZCB0aGlzIGFzIGluXG4gICAgaWYgKHRoaXMubWFzdGVyKVxuICAgICAgcmV0dXJuIHRoaXMubWFzdGVyLmF1ZGlvVGltZTtcblxuICAgIHJldHVybiB0aGlzLl9jdXJyZW50VGltZVRvQXVkaW9UaW1lRnVuY3Rpb24odGhpcy5jdXJyZW50VGltZSk7XG4gIH1cblxuICBnZXQgY3VycmVudFBvc2l0aW9uKCkge1xuICAgIGNvbnN0IG1hc3RlciA9IHRoaXMubWFzdGVyO1xuXG4gICAgaWYgKG1hc3RlciAmJiBtYXN0ZXIuY3VycmVudFBvc2l0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gbWFzdGVyLmN1cnJlbnRQb3NpdGlvbjtcblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuXG5cbiAgLy8gaW5oZXJpdGVkIGZyb20gc2NoZWR1bGluZyBxdWV1ZVxuICAvKipcbiAgICogQWRkIGEgVGltZUVuZ2luZSBvciBhIHNpbXBsZSBjYWxsYmFjayBmdW5jdGlvbiB0byB0aGUgc2NoZWR1bGVyIGF0IGFuXG4gICAqIG9wdGlvbmFsbHkgZ2l2ZW4gdGltZS4gV2hldGhlciB0aGUgYWRkIG1ldGhvZCBpcyBjYWxsZWQgd2l0aCBhIFRpbWVFbmdpbmVcbiAgICogb3IgYSBjYWxsYmFjayBmdW5jdGlvbiBpdCByZXR1cm5zIGEgVGltZUVuZ2luZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGFyZ3VtZW50XG4gICAqIG9mIHRoZSBtZXRob2RzIHJlbW92ZSBhbmQgcmVzZXRFbmdpbmVUaW1lLiBBIFRpbWVFbmdpbmUgYWRkZWQgdG8gYSBzY2hlZHVsZXJcbiAgICogaGFzIHRvIGltcGxlbWVudCB0aGUgc2NoZWR1bGVkIGludGVyZmFjZS4gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGFkZGVkIHRvIGFcbiAgICogc2NoZWR1bGVyIHdpbGwgYmUgY2FsbGVkIGF0IHRoZSBnaXZlbiB0aW1lIGFuZCB3aXRoIHRoZSBnaXZlbiB0aW1lIGFzXG4gICAqIGFyZ3VtZW50LiBUaGUgY2FsbGJhY2sgY2FuIHJldHVybiBhIG5ldyBzY2hlZHVsaW5nIHRpbWUgKGkuZS4gdGhlIG5leHRcbiAgICogdGltZSB3aGVuIGl0IHdpbGwgYmUgY2FsbGVkKSBvciBpdCBjYW4gcmV0dXJuIEluZmluaXR5IHRvIHN1c3BlbmQgc2NoZWR1bGluZ1xuICAgKiB3aXRob3V0IHJlbW92aW5nIHRoZSBmdW5jdGlvbiBmcm9tIHRoZSBzY2hlZHVsZXIuIEEgZnVuY3Rpb24gdGhhdCBkb2VzXG4gICAqIG5vdCByZXR1cm4gYSB2YWx1ZSAob3IgcmV0dXJucyBudWxsIG9yIDApIGlzIHJlbW92ZWQgZnJvbSB0aGUgc2NoZWR1bGVyXG4gICAqIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBhcmd1bWVudCBvZiB0aGUgbWV0aG9kcyByZW1vdmUgYW5kIHJlc2V0RW5naW5lVGltZVxuICAgKiBhbnltb3JlLlxuICAgKlxuICAgKiBAbmFtZSBhZGRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJvZiBTY2hlZHVsZXJcbiAgICogQGluc3RhbmNlXG4gICAqIEBwYXJhbSB7VGltZUVuZ2luZXxGdW5jdGlvbn0gZW5naW5lIC0gRW5naW5lIHRvIGFkZCB0byB0aGUgc2NoZWR1bGVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbdGltZT10aGlzLmN1cnJlbnRUaW1lXSAtIFNjaGVkdWxlIHRpbWVcbiAgICovXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBUaW1lRW5naW5lIGZyb20gdGhlIHNjaGVkdWxlciB0aGF0IGhhcyBiZWVuIGFkZGVkIHRvIHRoZVxuICAgKiBzY2hlZHVsZXIgdXNpbmcgdGhlIGFkZCBtZXRob2QuXG4gICAqXG4gICAqIEBuYW1lIGFkZFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlcm9mIFNjaGVkdWxlclxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtUaW1lRW5naW5lfSBlbmdpbmUgLSBFbmdpbmUgdG8gcmVtb3ZlIGZyb20gdGhlIHNjaGVkdWxlclxuICAgKiBAcGFyYW0ge051bWJlcn0gW3RpbWU9dGhpcy5jdXJyZW50VGltZV0gLSBTY2hlZHVsZSB0aW1lXG4gICAqL1xuICAvKipcbiAgICogUmVzY2hlZHVsZSBhIHNjaGVkdWxlZCB0aW1lIGVuZ2luZSBhdCBhIGdpdmVuIHRpbWUuXG4gICAqXG4gICAqIEBuYW1lIHJlc2V0RW5naW5lVGltZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlcm9mIFNjaGVkdWxlclxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtUaW1lRW5naW5lfSBlbmdpbmUgLSBFbmdpbmUgdG8gcmVzY2hlZHVsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSAtIFNjaGVkdWxlIHRpbWVcbiAgICovXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIHNjaGVkdWxlZCBjYWxsYmFja3MgYW5kIGVuZ2luZXMgZnJvbSB0aGUgc2NoZWR1bGVyLlxuICAgKlxuICAgKiBAbmFtZSBjbGVhclxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlcm9mIFNjaGVkdWxlclxuICAgKiBAaW5zdGFuY2VcbiAgICovXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjaGVkdWxlcjtcbiJdfQ==